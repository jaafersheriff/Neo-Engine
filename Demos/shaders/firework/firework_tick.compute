

layout(std140, binding = 0) coherent buffer BufferA {
	vec4 posIntensity[];
};

layout(std140, binding = 1) coherent buffer BufferB {
	vec3 velocity[];
};


uniform vec3 lightPos;
uniform float timestep;

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

void init() {
	posIntensity[gl_GlobalInvocationID.x] = vec4(lightPos, rand(gl_GlobalInvocationID.yx / 120938.1981273) * 100);
	velocity[gl_GlobalInvocationID.x] = vec3(0, -0.75, 0);
}

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
void main() {
#ifdef INIT
	init();
	return;
#endif
	float intensity = posIntensity[gl_GlobalInvocationID.x].a;
	if (intensity < EP) {
		init();
		return;
	}
	vec3 pos = posIntensity[gl_GlobalInvocationID.x].xyz;
	vec3 vel = velocity[gl_GlobalInvocationID.x].xyz;
	//vel += vec3(0, -0.98 * timestep, 0);
	pos += vel * timestep;
	intensity *= 0.97; // TODO uniform

	posIntensity[gl_GlobalInvocationID.x] = vec4(pos, intensity);
	velocity[gl_GlobalInvocationID.x] = vec3(0,0,0);
}
