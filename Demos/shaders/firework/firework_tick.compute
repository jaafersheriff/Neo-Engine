

layout(std140, binding = 0) volatile buffer BufferA {
	vec4 posIntensity[];
};

layout(std140, binding = 1) volatile buffer BufferB {
	vec4 velocity[];
};


uniform vec3 lightPos;
uniform float timestep;

uniform float baseSpeed;
uniform int numParents;
uniform float parentIntensity;
uniform float parentSpeed;

uniform float childPosOffset;
uniform float childIntensity;
uniform float childVelocityBias;

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

uint getParentIndex() {
	return gl_GlobalInvocationID.x - (gl_GlobalInvocationID.x % numParents);
}

void init() {
	float vel = baseSpeed * rand(mod(1.19827, timestep) * gl_GlobalInvocationID.yx + timestep);
	float theta = rand(mod(12.78631, timestep) + gl_GlobalInvocationID.xy) * 2.0 - 1.0;
	float phi = rand(mod(43.52049, timestep) + gl_GlobalInvocationID.xx) * 2.0 - 1.0;
	float x = sin(phi) * cos(theta);
	float z = sin(phi) * sin(theta);
	float y = cos(phi);
	vec3 v = vel * vec3(x, y, z);

	if (gl_GlobalInvocationID.x % numParents == 0.0) {
		posIntensity[gl_GlobalInvocationID.x].xyz = lightPos;
		posIntensity[gl_GlobalInvocationID.x].a = rand(gl_GlobalInvocationID.xx + timestep) * parentIntensity;
		velocity[gl_GlobalInvocationID.x].xyz = v * parentSpeed;
		velocity[gl_GlobalInvocationID.x].a = 1.0;
	}
	else {
		vec3 parentPos = posIntensity[getParentIndex()].xyz;
		vec3 parentVel = velocity[getParentIndex()].xyz;
		posIntensity[gl_GlobalInvocationID.x].xyz = parentPos - parentVel * childPosOffset;
		posIntensity[gl_GlobalInvocationID.x].a = rand(gl_GlobalInvocationID.xx + timestep) * childIntensity;
		velocity[gl_GlobalInvocationID.x].xyz = mix(-parentVel, v, childVelocityBias);
		velocity[gl_GlobalInvocationID.x].a = 0.0;
	}
}

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
void main() {
#ifdef INIT
	init();
	return;
#endif
	float intensity = posIntensity[gl_GlobalInvocationID.x].a;
	if (intensity < 0.15) {
		//if (gl_GlobalInvocationID.x % numParents != 0.0) {
			init();
			float parentIntensity = posIntensity[getParentIndex()].a;
			if (parentIntensity < 0.1) {
				posIntensity[gl_GlobalInvocationID.x].a = 0.0;
			}
			return;
		//}
	}
	vec3 pos = posIntensity[gl_GlobalInvocationID.x].xyz;
	vec4 vel = velocity[gl_GlobalInvocationID.x];
	vel.xyz *= 0.99;
	vel.xyz += vec3(0, -2.98 * timestep, 0);
	pos += vel.xyz * timestep;

	if (vel.a > 0.9) {
		intensity *= 0.98; // TODO uniform
	}
	else {
		intensity *= 0.97; // TODO uniform
	}

	posIntensity[gl_GlobalInvocationID.x] = vec4(pos, intensity);
	velocity[gl_GlobalInvocationID.x] = vel;
}
