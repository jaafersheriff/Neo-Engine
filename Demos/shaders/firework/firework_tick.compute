

layout(std140, binding = 0) volatile buffer BufferA {
	vec4 posIntensity[];
};

layout(std140, binding = 1) volatile buffer BufferB {
	vec4 velocity[];
};

uniform vec4 random;
uniform vec3 lightPos;
uniform float timestep;

uniform float baseSpeed;
uniform float velocityDecay;
uniform float gravity;
uniform float minIntensity;
uniform int infinite;

uniform float parentIntensity;
uniform float parentSpeed;
uniform float parentIntensityDecay;

uniform int numChildren;
uniform float childPosOffset;
uniform float childIntensity;
uniform float childVelocityBias;
uniform float childIntensityDecay;

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

uint getParentIndex() {
	return gl_GlobalInvocationID.x - (gl_GlobalInvocationID.x % numChildren);
}

void init() {
	float theta = rand(random.yx + gl_GlobalInvocationID.xx) * PI;
	float phi = rand(random.zy + gl_GlobalInvocationID.xx) * 2.0 * PI;
	float x = sin(theta) * cos(phi);
	float z = sin(theta) * sin(phi);
	float y = cos(theta);
	vec3 v = vec3(x, y, z);

	if (gl_GlobalInvocationID.x % numChildren == 0.0) {
		posIntensity[gl_GlobalInvocationID.x].xyz = lightPos;
		posIntensity[gl_GlobalInvocationID.x].a = rand(random.az + gl_GlobalInvocationID.xx) * parentIntensity * 2.0;
		velocity[gl_GlobalInvocationID.x].xyz = v * (baseSpeed + parentSpeed * rand(random.zy * timestep + gl_GlobalInvocationID.xx));
		velocity[gl_GlobalInvocationID.x].a = 1.0;
	}
	else {
		vec4 parentPos = posIntensity[getParentIndex()];
		vec3 parentVel = velocity[getParentIndex()].xyz;
		posIntensity[gl_GlobalInvocationID.x].xyz = parentPos.xyz - parentVel * childPosOffset;
		posIntensity[gl_GlobalInvocationID.x].a = rand(random.za + gl_GlobalInvocationID.xx) * childIntensity;
		velocity[gl_GlobalInvocationID.x].xyz = mix(-parentVel, v * baseSpeed / 2, childVelocityBias);
		velocity[gl_GlobalInvocationID.x].a = 0.0;
	}
}

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
void main() {
#ifdef INIT
	init();
	return;
#endif
	float intensity = posIntensity[gl_GlobalInvocationID.x].a;
	if (intensity < minIntensity) {
		if (gl_GlobalInvocationID.x % numChildren != 0.0) {
			init();
			float parentIntensity = posIntensity[getParentIndex()].a;
			if (parentIntensity < minIntensity) {
				posIntensity[gl_GlobalInvocationID.x].a = 0.0;
			}
			return;
		}
	}

	 vec3 pos = posIntensity[gl_GlobalInvocationID.x].xyz;
	 vec4 vel = velocity[gl_GlobalInvocationID.x];
	 vel.xyz *= velocityDecay;
	 vel.xyz += vec3(0, -gravity * timestep, 0);
	 pos += vel.xyz * timestep;

	if (vel.a > 0.9) {
		intensity *= parentIntensityDecay;
	}
	else {
		intensity *= childIntensityDecay;
	}

	posIntensity[gl_GlobalInvocationID.x] = vec4(pos, intensity);
	velocity[gl_GlobalInvocationID.x] = vel;
}
