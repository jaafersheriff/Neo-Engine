

layout(std140, binding = 0) coherent buffer BufferA {
	vec4 posIntensity[];
};

layout(std140, binding = 1) coherent buffer BufferB {
	vec4 velocity[];
};


uniform vec3 lightPos;
uniform float timestep;

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

void init() {
	float ra = rand(gl_GlobalInvocationID.yx) * sign(rand(gl_GlobalInvocationID.xy * timestep) - 0.5);
	float rb = rand(gl_GlobalInvocationID.xy) * sign(rand(gl_GlobalInvocationID.yx * timestep) - 0.5);
	float offset = 0.21;
	posIntensity[gl_GlobalInvocationID.x] = vec4(lightPos + offset * vec3(ra, 0.0, rb), rand(gl_GlobalInvocationID.xx * timestep));
	float downward = 3.0;
	velocity[gl_GlobalInvocationID.x] = vec4(ra, downward * -98 * timestep, rb, 0);

	if (gl_GlobalInvocationID.x % 4 == 0.0) {
		velocity[gl_GlobalInvocationID.x] *= -2.0;
		posIntensity[gl_GlobalInvocationID.x].a *= 8.0;
		barrier();
	}
	else {
		posIntensity[gl_GlobalInvocationID.x].xyz = posIntensity[gl_GlobalInvocationID.x - (gl_GlobalInvocationID.x % 4)].xyz;
		posIntensity[gl_GlobalInvocationID.x].a *= 0.3;
		barrier();
	}
}

layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
void main() {
#ifdef INIT
	init();
	return;
#endif
	float intensity = posIntensity[gl_GlobalInvocationID.x].a;
	if (intensity < EP) {
		init();
		return;
	}
	vec3 pos = posIntensity[gl_GlobalInvocationID.x].xyz;
	vec3 vel = velocity[gl_GlobalInvocationID.x].xyz;
	vel += vec3(0, -0.98 * timestep, 0);
	pos += vel * timestep;

	intensity *= 0.98; // TODO uniform

	posIntensity[gl_GlobalInvocationID.x] = vec4(pos, intensity);
	velocity[gl_GlobalInvocationID.x] = vec4(vel, 0.0);
}
