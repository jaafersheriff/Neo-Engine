
#include "pbr/ibl.glsl"
#include "pbr/pbr.glsl"

layout(binding = 0, rgba16f) uniform imageCube dst;
#ifdef EQUIRECTANGULAR
layout(binding = 1) uniform sampler2D cubeMap;
#else
layout(binding = 1) uniform samplerCube cubeMap;
#endif

uniform float roughness;
uniform int mipLevel;
uniform int resolution;
uniform int sampleCount;

// https://learnopengl.com/PBR/IBL/Diffuse-irradiance
const vec2 invAtan = vec2(0.1591, 0.3183);
vec2 SampleSphericalMap(vec3 v) {
    vec2 uv = vec2(atan(v.z, v.x), asin(v.y));
    uv *= invAtan;
    uv += 0.5;
    return uv;
}

vec3 sampleCubemap(vec3 uvw, float lod) {
#ifdef EQUIRECTANGULAR
    vec4 color = textureLod(cubeMap, SampleSphericalMap(normalize(uvw)), lod);
#else
    vec4 color = textureLod(cubeMap, uvw, lod);
#endif

#ifndef HDR
    color = srgbToLinear(color);
#endif

    return color.rgb;
}

// From Karis, 2014
vec3 prefilterEnvMap(vec3 R) {
    // Isotropic approximation: we lose stretchy reflections :(
    vec3 N = R;
    vec3 V = R;

    vec3 prefilteredColor = vec3(0.0);
    float totalWeight = 0.0;
    for (uint i = 0u; i < uint(sampleCount); i++) {
        vec2 Xi = hammersley(i, uint(sampleCount));
        vec3 H = importanceSampleGGX(Xi, N, roughness);
        float VdotH = dot(V, H);
        float NdotH = VdotH; // Since N = V in our approximation
        // Use microfacet normal H to find L
        vec3 L = 2.0 * VdotH * H - V;
        float NoL = saturate(dot(N, L));
        // Clamp 0 <= NdotH <= 1
        NdotH = saturate(NdotH);

        if (NoL > 0.0) {
            // Based off https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html
            // Typically you'd have the following:
            // float pdf = D_GGX(NdotH, roughness) * NdotH / (4.0 * VdotH);
            // but since V = N => VdotH == NdotH
            float pdf = D_GGX(NdotH, roughness) / 4.0 + 1e-5;
            // Solid angle of current sample -- bigger for less likely samples
            float omegaS = 1.0 / (float(sampleCount) * pdf);
            // Solid angle of texel
            float omegaP = 4.0 * PI / (6.0 * resolution * resolution);
            // Mip level is determined by the ratio of our sample's solid angle to a texel's solid angle
            float mipLevel = max(0.5 * log2(omegaS / omegaP), 0.0);
            prefilteredColor += sampleCubemap(L, mipLevel) * NoL;
            totalWeight += NoL;
        }
    }
    return prefilteredColor / totalWeight;
}

// https://bruop.github.io/ibl/
layout (local_size_x = 8, local_size_y = 8, local_size_z = 6) in;
void main() {
    float mipResolution = resolution / pow(2.0, mipLevel);
    if (gl_GlobalInvocationID.x >= mipResolution || gl_GlobalInvocationID.y >= mipResolution) {
        return;
    }

    vec2 baseUv = vec2(gl_GlobalInvocationID.xy + 0.5) / vec2(mipResolution);
    baseUv = 2.0 * baseUv - 1.0;
    baseUv.y *= -1.0;

    vec3 R;
    switch (gl_GlobalInvocationID.z) {
    case 0:
        R = vec3(1.0, baseUv.y, -baseUv.x);
        break;
    case 1:
        R = vec3(-1.0, baseUv.y, baseUv.x);
        break;
    case 2:
        R = vec3(baseUv.x, 1.0, -baseUv.y);
        break;
    case 3:
        R = vec3(baseUv.x, -1.0, baseUv.y);
        break;
    case 4:
        R = vec3(baseUv.x, baseUv.y, 1.0);
        break;
    case 5:
    default:
        R = vec3(-baseUv.x, baseUv.y, -1.0);
    }
    R = normalize(R);

    if (mipLevel == 0) {
        vec3 color = sampleCubemap(R, 0);
        imageStore(dst, ivec3(gl_GlobalInvocationID.xyz), vec4(color.rgb, 1.0));
        return;
    }

    imageStore(dst, ivec3(gl_GlobalInvocationID.xyz), vec4(prefilterEnvMap(R), 1.0));
}