
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform writeonly image3D volume;

uniform float near;
uniform float far;

uniform sampler2D inputColor;
uniform sampler2D inputDepth;

ivec3 texToVolume(vec2 texCoords, float depth, ivec3 volumeBounds) {
	return ivec3(texCoords * volumeBounds.xy, depth * volumeBounds.z);
}

float linearizeDepth(float d,float zNear,float zFar) {
    return zNear * zFar / (zFar + d * (zNear - zFar));
}

void main() {
	// get index in global work group i.e x,y position
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec3 dims = imageSize(volume);
	
	// math
	ivec2 backbufferSize = textureSize(inputColor, 0);
	vec2 texCoords = vec2(pixel_coords.xy) / vec2(backbufferSize);

	vec4 color = vec4(texture(inputColor, texCoords).rgb, 1.0);
	float depth = linearizeDepth(texture(inputDepth, texCoords).x, near, far);

	// output to a specific pixel in the image
	ivec3 volCoords = texToVolume(texCoords, depth, dims);
	if (depth >= 0.8) {
		color.a = 0.0;
	}
	imageStore(volume, volCoords, color);
}
