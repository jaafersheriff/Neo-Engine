
layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform writeonly image3D volume;

uniform float near;
uniform float far;

uniform sampler2D inputColor;
uniform sampler2D inputDepth;

// depth, y, x
ivec3 texToVolume(vec2 texCoords, float depth, ivec3 volumeBounds) {
	return ivec3(depth * volumeBounds.z, texCoords * volumeBounds.yx);
}

float linearizeDepth(float d,float zNear,float zFar) {
	
	    float z_n = 2.0 * d - 1.0;
    return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));
}

void main() {
	// get index in global work group i.e x,y position
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec3 dims = imageSize(volume);
	
	// math
	ivec2 backbufferSize = textureSize(inputColor, 0);
	vec2 texCoords = vec2(pixel_coords.xy) / vec2(backbufferSize);

	vec4 color = vec4(texture(inputColor, texCoords).rgb, 1.0);
	float depthSample = texture(inputDepth, texCoords).x;
	float depth = linearizeDepth(depthSample, near, far);

	// output to a specific pixel in the image
	ivec3 volCoords = texToVolume(texCoords, 1.0 - depthSample, dims);
	if (depthSample > 0.9) {
		// color.a = 0.0;
	}
	imageStore(volume, volCoords, color);
}
